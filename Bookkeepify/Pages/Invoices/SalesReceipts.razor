@page "/salesReceipts/{selectedInvoiceType}"
@attribute [Authorize]

<PageTitle>@SelectedInvoiceType</PageTitle>

@if (HasAccess)
{
    @if (ShowNewEditPanel)
    {
        <InvoicesNewEdit SelectedInvoice="@selectedInvoice" OnSave="HandleSaveResult" />
    }
    else
    {
        <button class="btn btn-success btn-lg" @onclick="NewInvoice">
            <i class="oi oi-plus"></i>&nbsp;New @SelectedInvoiceType
        </button>
        <br />
        <br />
        <InvoicesList DesiableButtons="@ShowNewEditPanel"
                      SelectedInvoiceType="@selectedInvoiceType"
                      OnEdit="HandleEditInvoice"
                      @ref="invoicesListRef" />
    }
}
else
{
    <p>Access denied! You don't have permission to view this page.</p>
}



@using Bookkeepify.Models
@using Bookkeepify.Services
@inject AuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider


@code {
    [Parameter]
    public string SelectedInvoiceType { get; set; }

    private bool HasAccess { get; set; } = false;

    private Invoice selectedInvoice;
    private Boolean ShowNewEditPanel = false;

    private InvoicesList invoicesListRef;
    private InvoiceType selectedInvoiceType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        HasAccess = await AuthorizationService.CheckPageAccessAsync(authState);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse<InvoiceType>(SelectedInvoiceType, out var parsedInvoiceType))
        {
            selectedInvoiceType = parsedInvoiceType;
            StateHasChanged();
        }
        else
        {
            selectedInvoiceType = InvoiceType.Invoice; // Replace DefaultValue with an actual default value
            StateHasChanged();
        }
    }

    private void NewInvoice()
    {
        selectedInvoice = null;
        ShowNewEditPanel = true;
    }

    private async Task HandleEditInvoice(Invoice invoice)
    {
        ShowNewEditPanel = true;
        selectedInvoice = invoice;
    }


    private async Task HandleSaveResult(bool isSaved)
    {
        ShowNewEditPanel = false;

        if (isSaved)
        {
            // in edit mode there is no need to the following code!
            if (invoicesListRef != null)
            {
                // Call the RefreshAccounts method of the AccountsList component
                await invoicesListRef.RefreshInvoices();
            }
        }
        else
        {
            // Cancel was selected
        }
    }

}
