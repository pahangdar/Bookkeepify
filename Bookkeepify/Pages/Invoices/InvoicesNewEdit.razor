@page "/invoices/newedit"
@attribute [Authorize]

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if (isSaved)
{
    <p><em>Invoice saved successfully!</em></p>
}

    <EditForm Model="@invoice" OnValidSubmit="Next">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="date">Date:</label>
            <div class="col-lg-3">
                <InputDate class="form-control" @bind-Value="@invoice.Date" />
                <ValidationMessage For="@(() => invoice.Date)" />
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <InputText class="form-control" @bind-Value="@invoice.Description" />
            <ValidationMessage For="@(() => invoice.Description)" />
        </div>

        <div class="form-group">
            <label for="number">Number:</label>
            <input type="number" class="form-control" @bind="invoice.Number" />
            <ValidationMessage For="@(() => invoice.Number)" />
        </div>

        <div class="form-group">
            <label for="duedate">Due Date:</label>
            <div class="col-lg-3">
                <InputDate class="form-control" @bind-Value="@invoice.DueDate" />
                <ValidationMessage For="@(() => invoice.DueDate)" />
            </div>
        </div>

        <div class="form-group">
            <label for="customer">Customer:</label>
            <div class="col-lg-4">
            <select class="form-control" @bind="@invoice.CustomerId" required>
                    <option value="" selected disabled>Choose...</option>
                @if(customers != null)
                {
                    @foreach (var customer in customers)
                    {
                        <option value="@customer.Id">@customer.Name</option>
                    }
                }
                </select>
            </div>
        </div>

        <div class="form-group mt-4  mb-4">
            <button type="submit" class="btn btn-primary mr-2">Next</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
        <hr />
    </EditForm>

@using Bookkeepify.Models
@using Bookkeepify.Services
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject InvoiceService InvoiceService
@inject CustomerService CustomerService

@code {
    [Parameter]
    public EventCallback<bool> OnSave { get; set; }
    [Parameter]
    public Invoice SelectedInvoice { get; set; }
    [Parameter]
    public InvoiceType SelectedInvoiceType { get; set; }

    private bool HasAccess { get; set; } = false;

    private List<Customer> customers;
    public Invoice invoice = new Invoice();
    private Invoice initialInvoice;
    private bool isSaved = false;
    private bool isEditMode => SelectedInvoice != null;
    private string title;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authenticationState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        customers = await CustomerService.GetCustomersAsync();
        invoice = new Invoice();

        if (isEditMode)
        {
            title = $"Edit {SelectedInvoiceType}";
            invoice = SelectedInvoice;
        } else
        {
            title = $"Add New {SelectedInvoiceType}";
            invoice.Id = 0;
            invoice.Date = DateTime.Today;
            invoice.DueDate = DateTime.Today;
            invoice.InvoiceType = SelectedInvoiceType;
        }

        invoice.UserId = userId;

        initialInvoice = new Invoice
            {
                Date = invoice.Date,
                Description = invoice.Description,
                Number = invoice.Number,
                DueDate = invoice.DueDate
            };
    }

    private void Next()
    {
        invoice.Customer = customers.FirstOrDefault(a => a.Id == invoice.CustomerId);
        InvoiceService.Invoice = invoice;
        NavigationManager.NavigateTo("/invoices/details/newedit");
    }

    private void Cancel()
    {
        // Reset the form fields and clear any validation errors
        //invoice = new Invoice();
        invoice.Date = initialInvoice.Date;
        invoice.Description = initialInvoice.Description;
        invoice.Number = initialInvoice.Number;
        invoice.DueDate = initialInvoice.DueDate;
        isSaved = false;
        OnSave.InvokeAsync(isSaved);
    }

}
