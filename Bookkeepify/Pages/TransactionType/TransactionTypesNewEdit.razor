@page "/transactiontypes/new-edit"
@attribute [Authorize]

<PageTitle>@title</PageTitle>

@if (HasAccess)
{
    <h3>@title</h3>

    @if (isSaved)
    {
        <p><em>TransactionType saved successfully!</em></p>
    }

    @if (accounts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <EditForm Model="@transactiontype" OnValidSubmit="SaveTransactionType">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Name:</label>
                <InputText class="form-control" @bind-Value="@transactiontype.Name" />
                <ValidationMessage For="@(() => transactiontype.Name)" />
            </div>

            <div class="form-group">
                <label for="TransactionTypeDebtAccount">Debt Account:</label>
                <select class="form-control" @bind="@transactiontype.DebtAccountId" required>
                    <option value="" selected disabled>Choose...</option>
                    @foreach (var account in accounts)
                    {
                        <option value="@account.Id">@account.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="TransactionTypeCreditAccount">Credit Account:</label>
                <select class="form-control" @bind="@transactiontype.CreditAccountId" required>
                    <option value="" selected disabled>Choose...</option>
                    @foreach (var account in accounts)
                    {
                        <option value="@account.Id">@account.Name</option>
                    }
                </select>
            </div>

            <div class="form-group mt-4  mb-4">
                <button type="submit" class="btn btn-primary mr-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
            <hr />
        </EditForm>
    }
}
else
{
    <p>Access denied! You don't have permission to view this page.</p>
}

@using Bookkeepify.Models
@using Bookkeepify.Services
@using System.Security.Claims
@inject AccountService AccountService
@inject TransactionTypeService TransactionTypeService
@inject AuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider


@code {
    [Parameter]
    public EventCallback<bool> OnSave { get; set; }
    [Parameter]
    public TransactionType SelectedTransactionType { get; set; }

    private bool HasAccess { get; set; } = false;
    private TransactionType transactiontype = new TransactionType();
    private List<Account> accounts;
    private bool isSaved = false;
    private bool isEditMode => SelectedTransactionType != null;
    private string title;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        HasAccess = await AuthorizationService.CheckPageAccessAsync(authState);

        accounts = await AccountService.GetAccountsAsync();

        if (isEditMode)
        {
            title = "Edit TransactionType";
            transactiontype.Name = SelectedTransactionType.Name;
            transactiontype.DebtAccountId = SelectedTransactionType.DebtAccountId;
            transactiontype.CreditAccountId = SelectedTransactionType.CreditAccountId;
        }
        else
        {
            title = "Add New TransactionType";
        }
    }

    private async Task SaveTransactionType()
    {
        if (isEditMode)
        {
            SelectedTransactionType.Name = transactiontype.Name;
            SelectedTransactionType.DebtAccountId = transactiontype.DebtAccountId;
            SelectedTransactionType.CreditAccountId = transactiontype.CreditAccountId;
            await TransactionTypeService.UpdateTransactionTypeAsync(SelectedTransactionType);
        }
        else
        {
            await TransactionTypeService.AddTransactionTypeAsync(transactiontype);
        }
        // Clear the form and set the saved flag
        transactiontype = new TransactionType();
        isSaved = true;
        await OnSave.InvokeAsync(isSaved);
    }

    private void Cancel()
    {
        // Reset the form fields and clear any validation errors
        transactiontype = new TransactionType();
        isSaved = false;
        OnSave.InvokeAsync(isSaved);
    }
}
