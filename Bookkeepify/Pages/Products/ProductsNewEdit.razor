@page "/products/new-edit"
@attribute [Authorize]

<PageTitle>@title</PageTitle>

@if (HasAccess)
{

    <h3>@title</h3>

    @if (isSaved)
    {
        <p><em>Product saved successfully!</em></p>
    }

    @if (productTypes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <EditForm Model="@product" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Name:</label>
                <InputText class="form-control" @bind-Value="@product.Name" />
                <ValidationMessage For="@(() => product.Name)" />
            </div>

            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" class="form-control" @bind="product.Price" />
                <ValidationMessage For="@(() => product.Price)" />
            </div>

            <div class="form-group">
                <label for="ProductType">Product Type:</label>
                <div class="col-lg-4">
                    <select class="form-control" @bind="@product.ProductTypeId" required>
                        <option value="" selected disabled>Choose...</option>
                        @foreach (var productType in productTypes)
                        {
                            <option value="@productType.Id">@productType.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group mt-4  mb-4">
                <button type="submit" class="btn btn-primary mr-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
            <hr />
        </EditForm>
    }
}
else
{
    <p>Access denied! You don't have permission to view this page.</p>
}

@using Bookkeepify.Models
@using Bookkeepify.Services
@inject ProductService ProductService
@inject ProductTypeService ProductTypeService
@inject AuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider


@code {
    [Parameter]
    public EventCallback<bool> OnSave { get; set; }
    [Parameter]
    public Product SelectedProduct { get; set; }

    private bool HasAccess { get; set; } = false;

    private Product product = new Product();
    private List<ProductType> productTypes;
    private bool isSaved = false;
    private bool isEditMode => SelectedProduct != null;
    private string title;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        HasAccess = await AuthorizationService.CheckPageAccessAsync(authState);

        productTypes = await ProductTypeService.GetProductTypesAsync();

        if (isEditMode)
        {
            title = "Edit Product";
            //product = SelectedProduct;
            product.Name = SelectedProduct.Name;
            product.Price = SelectedProduct.Price;
            product.ProductTypeId = SelectedProduct.ProductTypeId;
        } else
        {
            title = "Add New Product";
        }
    }

    private async Task SaveProduct()
    {  
        if (isEditMode)
        {
            SelectedProduct.Name = product.Name;
            SelectedProduct.Price = product.Price;
            SelectedProduct.ProductTypeId = product.ProductTypeId;
            await ProductService.UpdateProductAsync(SelectedProduct);
        }
        else
        {
            await ProductService.AddProductAsync(product);
        }
        // Clear the form and set the saved flag
        product = new Product();
        isSaved = true;
        await OnSave.InvokeAsync(isSaved);
    }

    private void Cancel()
    {
        // Reset the form fields and clear any validation errors
        product = new Product();
        isSaved = false;
        OnSave.InvokeAsync(isSaved);
    }
}
