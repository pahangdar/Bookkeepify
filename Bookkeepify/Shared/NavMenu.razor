<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Bookkeepify</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @foreach (var menu in menus)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href=@menu.Route>
                    <span class="oi @menu.IconClass" aria-hidden="true"></span> @menu.Lable
                </NavLink>
            </div>
        }
    </nav>
</div>

@using Bookkeepify.Data
@using Bookkeepify.Models
@using System.Security.Claims
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    private AppDbContext _context;
    public List<Menu> menus;
    private bool IsAdmin;

    protected override async Task OnInitializedAsync()
    {
        _context = new AppDbContext(Configuration);

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authenticationState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            menus = _context.Menus
                .Where(m => m.Permissions.Any(p => p.UserId == userId))
                .ToList();
        }

        IsAdmin = authenticationState.User.IsInRole("Admin");
        var user = authenticationState.User;
        Menu rolem = new Menu();
        rolem.Lable = "Roles";
        //menus.Add(rolem);

        //if (user.Identity.IsAuthenticated)
        {
            var roles = user.FindAll("role").Select(r => r.Value);
            foreach (var role in roles)
            {
                rolem.Lable = role;
                menus.Add(rolem);
                Console.WriteLine($"User {user.Identity.Name} has role: {role}");
            }
        }

    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
